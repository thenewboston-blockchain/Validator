AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  EC2 Instance

Parameters:
  EnvironmentName:
    Type: String
    Description: name of the environment

  NetworkSigningKey:
    Type: String
    NoEcho: true
    Description: network signing key

  NodeType:
    Type: String
    Description: Node type type

  NodeIdentifier:
    Type: String

  AccountNumber:
    Type: String

  DefaultTransactionFee:
    Type: String

  SeedBlockIdentifier:
    Type: String
    Default: ''

  RootAccountFile:
    Type: String

  VersionNumber:
    Type: String

  PrimaryIp:
    Type: String
    Default: ''

  PrimaryProto:
    Type: String
    Default: ''

  PrimaryPort:
    Type: String
    Default: ''

  PrimaryTrust:
    Type: String
    Default: ''

  VpcSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id

  PrivateSubnetIds:
    Type: CommaDelimitedList

  PublicSubnetIds:
    Type: CommaDelimitedList

  MasterUserPassword:
    Type: String

  DBEndpoint:
    Type: String

  DjangoSecretKey:
    Type: String

  DjangoSentryDSN:
    Type: String
    Default: ''

Conditions:
  EnableSentry:
    Fn::Not:
      - Fn::Equals:
          - !Ref DjangoSentryDSN
          - ''

Resources:
  DjangoSecretKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub ${EnvironmentName}ValidatorDjangoSecretKey${NodeType}
      Type: String
      Value: !Ref DjangoSecretKey

  SentryDsnParameter:
    Condition: EnableSentry
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub ${EnvironmentName}ValidatorDjangoSentryDSN${NodeType}
      Type: String
      Value: !Ref DjangoSentryDSN

  ValidatorInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - InstallUpdate
            - CreateDirs
            - SourceFiles
            - ConfigFiles
            - Init
            - Start

        InstallUpdate:
          commands:
            installUpdate:
              command: !Sub |
                #!/bin/bash
                set -xe
                yum update -y
                yum install -y amazon-linux-extras
                amazon-linux-extras enable python3.8 nginx1 redis4.0
                amazon-linux-extras install -y epel
                yum install -y python38 python38-devel nginx redis supervisor openssl-devel bzip2-devel libffi-devel postgresql-devel
                yum -y groupinstall "Development Tools"

        CreateDirs:
          commands:
            createDirs:
              command: !Sub |
                #!/bin/bash
                set -xe
                mkdir -p /var/log/celery
                mkdir -p /var/log/daphne
                chmod -R 0777 /var/log/celery
                chmod -R 0777 /var/log/daphne

                mkdir -p /var/www/validator
                mkdir -p /var/log/validator/api
                mkdir -p /var/log/validator/celery
                chmod -R 0777 /var/log/validator

                mkdir -p /var/run/daphne
                chmod 0775 /var/run/daphne
                chown nobody:nobody /var/run/daphne

        SourceFiles:
          sources:
            /var/www/validator/source: https://github.com/thenewboston-developers/Validator/tarball/master

        ConfigFiles:
          files:
            /etc/nginx/nginx.conf:
              content: !Sub |
                user nginx;
                worker_processes auto;
                error_log /var/log/nginx/error.log;
                pid /run/nginx.pid;

                include /usr/share/nginx/modules/*.conf;

                events {
                    worker_connections 1024;
                }

                http {
                    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                      '$status $body_bytes_sent "$http_referer" '
                                      '"$http_user_agent" "$http_x_forwarded_for"';

                    access_log  /var/log/nginx/access.log  main;

                    sendfile            on;
                    tcp_nopush          on;
                    tcp_nodelay         on;
                    keepalive_timeout   65;
                    types_hash_max_size 4096;

                    include             /etc/nginx/mime.types;
                    default_type        application/octet-stream;

                    upstream django {
                        server localhost:8001;
                    }

                    server {
                        listen                  80 default_server;
                        server_name             _;
                        charset                 utf-8;
                        client_max_body_size    75M;

                        location /media {
                            alias /var/www/validator/source/media;
                        }

                        location /static {
                            alias /var/www/validator/source/static;
                        }

                        location / {
                            proxy_pass http://django;

                            proxy_http_version 1.1;
                            proxy_set_header Upgrade $http_upgrade;
                            proxy_set_header Connection "upgrade";

                            proxy_redirect off;
                            proxy_set_header Host $host;
                            proxy_set_header X-Real-IP $remote_addr;
                            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                            proxy_set_header X-Forwarded-Host $server_name;
                        }
                    }
                }
              mode: '000644'
              owner: 'root'
              group: 'root'

            /etc/supervisord.d/celery.ini:
              content: !Sub |
                [program:validator-celery-w1]
                environment=
                    APP_LOGS_DIR=/var/log/validator/celery,
                    DJANGO_APPLICATION_ENVIRONMENT=production,
                    DJANGO_SETTINGS_MODULE=config.settings.production,
                    NETWORK_SIGNING_KEY=${NetworkSigningKey},
                    POSTGRES_HOST=${DBEndpoint},
                    POSTGRES_DB=${EnvironmentName}Validator,
                    POSTGRES_USER=root,
                    POSTGRES_PASSWORD=${MasterUserPassword},
                    SECRET_KEY=${DjangoSecretKey},
                    SENTRY_DSN='${DjangoSentryDSN}'
                directory=/var/www/validator/source

                user=nobody
                numprocs=1
                stdout_logfile=/var/log/celery/validator-celery-w1.log
                stderr_logfile=/var/log/celery/validator-celery-w1.error.log
                autostart=true
                autorestart=true
                startsecs=10

                command=/var/www/validator/venv/bin/celery worker
                    -A config.settings
                    --loglevel=DEBUG
                    --max-tasks-per-child=5000
                    --time-limit=1800
                    -c 2
                    -Q celery

                stopwaitsecs=600
                stopasgroup=true
                priority=1000

                [program:validator-celery-w2]
                environment=
                    APP_LOGS_DIR=/var/log/validator/celery,
                    DJANGO_APPLICATION_ENVIRONMENT=production,
                    DJANGO_SETTINGS_MODULE=config.settings.production,
                    NETWORK_SIGNING_KEY=${NetworkSigningKey},
                    POSTGRES_HOST=${DBEndpoint},
                    POSTGRES_DB=${EnvironmentName}Validator,
                    POSTGRES_USER=root,
                    POSTGRES_PASSWORD=${MasterUserPassword},
                    SECRET_KEY=${DjangoSecretKey},
                    SENTRY_DSN='${DjangoSentryDSN}'
                directory=/var/www/validator/source

                user=nobody
                numprocs=1
                stdout_logfile=/var/log/celery/validator-celery-w2.log
                stderr_logfile=/var/log/celery/validator-celery-w2.error.log
                autostart=true
                autorestart=true
                startsecs=10

                command=/var/www/validator/venv/bin/celery worker
                    -A config.settings
                    --loglevel=DEBUG
                    --max-tasks-per-child=5000
                    --time-limit=1800
                    -P solo
                    -Q block_queue

                stopwaitsecs=600
                stopasgroup=true
                priority=1000

                [program:validator-celery-w3]
                environment=
                    APP_LOGS_DIR=/var/log/validator/celery,
                    DJANGO_APPLICATION_ENVIRONMENT=production,
                    DJANGO_SETTINGS_MODULE=config.settings.production,
                    NETWORK_SIGNING_KEY=${NetworkSigningKey},
                    POSTGRES_HOST=${DBEndpoint},
                    POSTGRES_DB=${EnvironmentName}Validator,
                    POSTGRES_USER=root,
                    POSTGRES_PASSWORD=${MasterUserPassword},
                    SECRET_KEY=${DjangoSecretKey},
                    SENTRY_DSN='${DjangoSentryDSN}'
                directory=/var/www/validator/source

                user=nobody
                numprocs=1
                stdout_logfile=/var/log/celery/validator-celery-w3.log
                stderr_logfile=/var/log/celery/validator-celery-w3.error.log
                autostart=true
                autorestart=true
                startsecs=10

                command=/var/www/validator/venv/bin/celery worker
                    -A config.settings
                    --loglevel=DEBUG
                    --max-tasks-per-child=5000
                    --time-limit=1800
                    -P solo
                    -Q confirmation_block_queue

                stopwaitsecs=600
                stopasgroup=true
                priority=1000

              mode: '000600'
              owner: 'root'
              group: 'root'

            /etc/supervisord.d/daphne.ini:
              content: !Sub |
                [fcgi-program:asgi]
                environment=
                    APP_LOGS_DIR=/var/log/validator/api,
                    DJANGO_APPLICATION_ENVIRONMENT=production,
                    DJANGO_SETTINGS_MODULE=config.settings.production,
                    NETWORK_SIGNING_KEY=${NetworkSigningKey},
                    POSTGRES_HOST=${DBEndpoint},
                    POSTGRES_DB=${EnvironmentName}Validator,
                    POSTGRES_USER=root,
                    POSTGRES_PASSWORD=${MasterUserPassword},
                    SECRET_KEY=${DjangoSecretKey},
                    SENTRY_DSN='${DjangoSentryDSN}'
                directory=/var/www/validator/source
                socket=tcp://localhost:8001

                user=nobody
                numprocs=4
                stdout_logfile=/var/log/daphne/validator-acgi.log
                stderr_logfile=/var/log/daphne/validator-acgi.error.log
                autostart=true
                autorestart=true
                startsecs=10

                command=/var/www/validator/venv/bin/daphne
                    -u /var/run/daphne/daphne%(process_num)d.sock
                    --fd 0
                    --access-log -
                    --proxy-headers
                    config.asgi:application
                process_name=asgi%(process_num)d

                stopwaitsecs=600
                stopasgroup=true
                priority=1000
              mode: '000600'
              owner: 'root'
              group: 'root'

            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
                verbose=true
              mode: '000600'
              owner: 'root'
              group: 'root'

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ValidatorInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ValidatorInstance --configsets InstallAndRun --region ${AWS::Region}
                runas=root
              mode: '000600'
              owner: 'root'
              group: 'root'

            /etc/logrotate.d/celery:
              content: !Sub |
                /var/log/celery/*.log {
                  daily
                  rotate 5
                  copytruncate
                  compress
                  missingok
                  notifempty
                }
              mode: '000644'
              owner: 'root'
              group: 'root'

            /etc/logrotate.d/validator:
              content: !Sub |
                /var/log/validator/api/*.log {
                  daily
                  rotate 5
                  copytruncate
                  compress
                  missingok
                  notifempty
                }
                /var/log/validator/celery/*.log {
                  daily
                  rotate 5
                  copytruncate
                  compress
                  missingok
                  notifempty
                }
              mode: '000644'
              owner: 'root'
              group: 'root'

            /etc/tmpfiles.d/daphne.conf:
              content: !Sub |
                D /var/run/daphne 0775 nobody nobody -
              mode: '000644'
              owner: 'root'
              group: 'root'

        Init:
          commands:
            0.env:
              command: !Sub |
                #!/bin/bash
                set -xe
                rm -f /var/www/validator/.env
                echo "export DJANGO_APPLICATION_ENVIRONMENT=$DJANGO_APPLICATION_ENVIRONMENT" >> /var/www/validator/.env
                echo "export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE" >> /var/www/validator/.env
                echo "export NETWORK_SIGNING_KEY=$NETWORK_SIGNING_KEY" >> /var/www/validator/.env
                echo "export POSTGRES_HOST=$POSTGRES_HOST" >> /var/www/validator/.env
                echo "export POSTGRES_DB=$POSTGRES_DB" >> /var/www/validator/.env
                echo "export POSTGRES_USER=$POSTGRES_USER" >> /var/www/validator/.env
                echo "export POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> /var/www/validator/.env
                echo "export SECRET_KEY=$SECRET_KEY" >> /var/www/validator/.env
                echo "export SENTRY_DSN=$SENTRY_DSN" >> /var/www/validator/.env
              env:
                DJANGO_APPLICATION_ENVIRONMENT: 'production'
                DJANGO_SETTINGS_MODULE: 'config.settings.production'
                NETWORK_SIGNING_KEY: !Ref NetworkSigningKey
                POSTGRES_HOST: !Ref DBEndpoint
                POSTGRES_DB: !Sub ${EnvironmentName}Validator
                POSTGRES_USER: 'root'
                POSTGRES_PASSWORD: !Ref MasterUserPassword
                SECRET_KEY: !Ref DjangoSecretKey
                SENTRY_DSN: !Ref DjangoSentryDSN

            1.venvInit:
              command: !Sub |
                #!/bin/bash
                set -xe
                python3.8 -m venv --clear /var/www/validator/venv
              test: test ! -e /var/www/validator/venv

            2.venvInstall:
              command: !Sub |
                #!/bin/bash
                set -xe
                /var/www/validator/venv/bin/pip install -r /var/www/validator/source/requirements/production.txt

            3.djangoInit:
              command: !Sub |
                #!/bin/bash
                set -xe
                /var/www/validator/venv/bin/python /var/www/validator/source/manage.py migrate --noinput --skip-checks
                /var/www/validator/venv/bin/python /var/www/validator/source/manage.py collectstatic --noinput --clear --skip-checks
              cwd: /var/www/validator/source
              env:
                DJANGO_APPLICATION_ENVIRONMENT: 'production'
                DJANGO_SETTINGS_MODULE: 'config.settings.production'
                NETWORK_SIGNING_KEY: !Ref NetworkSigningKey
                POSTGRES_HOST: !Ref DBEndpoint
                POSTGRES_DB: !Sub ${EnvironmentName}Validator
                POSTGRES_USER: 'root'
                POSTGRES_PASSWORD: !Ref MasterUserPassword
                SECRET_KEY: !Ref DjangoSecretKey
                SENTRY_DSN: !Ref DjangoSentryDSN

            4.restartServices:
              command: !Sub |
                #!/bin/bash
                set -xe
                /bin/systemctl start redis
                /bin/systemctl restart supervisord
                /bin/systemctl restart nginx

            5.validatorInit:
              command: !Sub |
                #!/bin/bash
                set -xe
                if [ ! -f /var/www/validator/.init_done ]; then
                  IP_ADDRESS=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)

                  /var/www/validator/venv/bin/python /var/www/validator/source/manage.py initialize_validator \
                    --node_identifier ${NodeIdentifier} \
                    --account_number ${AccountNumber} \
                    --default_transaction_fee ${DefaultTransactionFee} \
                    --node_type ${NodeType} \
                    `if [ "${SeedBlockIdentifier}" != "" ]; then echo "--seed_block_identifier ${SeedBlockIdentifier}"; fi` \
                    --root_account_file ${RootAccountFile} \
                    --protocol http \
                    --ip_address $IP_ADDRESS \
                    --version_number ${VersionNumber} \
                    --unattended \
                    & touch /var/www/validator/.init_done
                fi
              cwd: /var/www/validator/source
              env:
                DJANGO_APPLICATION_ENVIRONMENT: 'production'
                DJANGO_SETTINGS_MODULE: 'config.settings.production'
                NETWORK_SIGNING_KEY: !Ref NetworkSigningKey
                POSTGRES_HOST: !Ref DBEndpoint
                POSTGRES_DB: !Sub ${EnvironmentName}Validator
                POSTGRES_USER: 'root'
                POSTGRES_PASSWORD: !Ref MasterUserPassword
                SECRET_KEY: !Ref DjangoSecretKey
                SENTRY_DSN: !Ref DjangoSentryDSN

            6.primarySet:
              command: !Sub |
                #!/bin/bash
                set -xe
                if [ -f /var/www/validator/.init_done ] && [ ! -f /var/www/validator/.set_primary_done ] && [ "${NodeIdentifier}" != "PRIMARY_VALIDATOR" ]; then
                  /var/www/validator/venv/bin/python /var/www/validator/source/manage.py set_primary_validator \
                    --ip_address ${PrimaryIp} \
                    --protocol ${PrimaryProto} \
                    --port ${PrimaryPort} \
                    --trust ${PrimaryTrust} \
                    --unattended \
                  & touch /var/www/validator/.set_primary_done
                fi
              cwd: /var/www/validator/source
              env:
                DJANGO_APPLICATION_ENVIRONMENT: 'production'
                DJANGO_SETTINGS_MODULE: 'config.settings.production'
                NETWORK_SIGNING_KEY: !Ref NetworkSigningKey
                POSTGRES_HOST: !Ref DBEndpoint
                POSTGRES_DB: !Sub ${EnvironmentName}Validator
                POSTGRES_USER: 'root'
                POSTGRES_PASSWORD: !Ref MasterUserPassword
                SECRET_KEY: !Ref DjangoSecretKey
                SENTRY_DSN: !Ref DjangoSentryDSN

        Start:
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

              redis:
                enabled: true
                ensureRunning: true

              nginx:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/nginx/nginx.conf
                  - /etc/supervisord.d/daphne.ini

              supervisord:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/supervisord.d/celery.ini
                  - /etc/supervisord.d/daphne.ini

    CreationPolicy:
      ResourceSignal:
        Timeout: 'PT5M'
    Properties:
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -xe
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ValidatorInstance --configsets InstallAndRun --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ValidatorInstance --region ${AWS::Region}
      ImageId: ami-0528a5175983e7f28
      InstanceType: 't2.micro'
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref VpcSecurityGroupId
          SubnetId: !Select [0, !Ref PublicSubnetIds]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ValidatorInstance


Outputs:
  PublicIp:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt [ValidatorInstance, PublicIp]
